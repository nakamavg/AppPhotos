plugins {
    alias(libs.plugins.android.application)
}

android {
    namespace 'com.example.nemergentprueba'
    compileSdk 35

    defaultConfig {
        applicationId "com.example.nemergentprueba"
        minSdk 24
        targetSdk 35
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    // Configuración de flavors con nombres de paquete completamente distintos
    flavorDimensions "version"
    productFlavors {
        dia {
            dimension "version"
            applicationId "com.nemergent.dia"  // ID completamente distinto
            versionNameSuffix ".dia"
        }

        noche {
            dimension "version"
            applicationId "com.nemergent.noche"  // ID completamente distinto 
            versionNameSuffix ".noche"
        }

        nemergent {
            dimension "version"
            applicationId "com.nemergent.app"  // ID completamente distinto
            versionNameSuffix ".nemergent"
        }
    }

    buildTypes {
        debug {
            debuggable true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    // Asegurar que todos los flavors sean instalables y visibles en el launcher
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "${variant.applicationId}-${variant.versionName}.apk"
        }
    }
}

// Tareas para instalar los flavors
tasks.register('installAllDebugFlavors') {
    dependsOn 'installDiaDebug', 'installNocheDebug', 'installNemergentDebug'
    description = 'Instala todos los flavors en modo debug'
    group = 'install'
}

tasks.register('installAllReleaseFlavors') {
    dependsOn 'installDiaRelease', 'installNocheRelease', 'installNemergentRelease'
    description = 'Instala todos los flavors en modo release'
    group = 'install'
}

// Tareas para desinstalar los flavors
tasks.register('uninstallAllFlavors') {
    dependsOn 'uninstallDiaDebug', 'uninstallNocheDebug', 'uninstallNemergentDebug', 
             'uninstallDiaRelease', 'uninstallNocheRelease', 'uninstallNemergentRelease'
    description = 'Desinstala todos los flavors (debug y release)'
    group = 'uninstall'
}

tasks.register('uninstallAllDebug') {
    dependsOn 'uninstallDiaDebug', 'uninstallNocheDebug', 'uninstallNemergentDebug'
    description = 'Desinstala todos los flavors en modo debug'
    group = 'uninstall'
}

tasks.register('uninstallAllRelease') {
    dependsOn 'uninstallDiaRelease', 'uninstallNocheRelease', 'uninstallNemergentRelease'
    description = 'Desinstala todos los flavors en modo release'
    group = 'uninstall'
}

// Tarea para verificar que los manifiestos estén correctamente configurados
tasks.register('checkLauncherManifests') {
    doLast {
        println "Verificando manifiestos para asegurar visibilidad en el launcher..."
        
        def flavors = ['dia', 'noche', 'nemergent']
        flavors.each { flavor ->
            def manifestFile = new File("${project.projectDir}/src/${flavor}/AndroidManifest.xml")
            if (manifestFile.exists()) {
                def content = manifestFile.text
                def hasLauncher = content.contains('android.intent.category.LAUNCHER')
                def hasMain = content.contains('android.intent.action.MAIN')
                def isExported = content.contains('android:exported="true"')
                
                println "${flavor} Manifest: LAUNCHER=${hasLauncher}, MAIN=${hasMain}, exported=${isExported}"
                
                if (!hasLauncher || !hasMain || !isExported) {
                    println "ADVERTENCIA: El manifest de ${flavor} podría no estar correctamente configurado para aparecer en el launcher"
                }
            } else {
                println "El manifest específico para ${flavor} no existe"
            }
        }
    }
}

dependencies {
    implementation(libs.appcompat)
    implementation(libs.material)
    testImplementation(libs.junit)
    androidTestImplementation(libs.ext.junit)
    androidTestImplementation(libs.espresso.core)

    // CameraX
    implementation("androidx.camera:camera-core:1.3.0")
    implementation("androidx.camera:camera-camera2:1.3.0")
    implementation("androidx.camera:camera-lifecycle:1.3.0")
    implementation("androidx.camera:camera-view:1.3.0")

    // Other
    implementation("androidx.activity:activity:1.7.2")
    implementation("androidx.core:core:1.12.0")

    // Room
    implementation("androidx.room:room-runtime:2.6.0")
    annotationProcessor("androidx.room:room-compiler:2.6.0")
    implementation("androidx.room:room-ktx:2.5.2")

    // Location services
    implementation("com.google.android.gms:play-services-location:21.0.1")
}